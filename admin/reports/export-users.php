<?php
// Include necessary files
require_once '../../includes/config.php';
require_once '../../includes/db.php';
require_once '../../includes/functions.php';

// Verify admin is logged in
session_start();
if (!isset($_SESSION['user_id']) || $_SESSION['user_role'] !== 'admin') {
    header('Location: ../login.php');
    exit;
}

// Get parameters
$period = isset($_GET['period']) ? $_GET['period'] : 'month';
$startDate = isset($_GET['start']) ? $_GET['start'] : date('Y-m-d', strtotime('-30 days'));
$endDate = isset($_GET['end']) ? $_GET['end'] : date('Y-m-d');

// Determine date range based on period
switch ($period) {
    case 'week':
        $startDate = date('Y-m-d', strtotime('-7 days'));
        $endDate = date('Y-m-d');
        break;
    case 'month':
        $startDate = date('Y-m-d', strtotime('-30 days'));
        $endDate = date('Y-m-d');
        break;
    case 'year':
        $startDate = date('Y-m-d', strtotime('-1 year'));
        $endDate = date('Y-m-d');
        break;
    // For custom, use the provided dates
}

// Set headers for CSV download
header('Content-Type: text/csv');
header('Content-Disposition: attachment; filename="wallpix-users-report-' . $startDate . '-to-' . $endDate . '.csv"');

// Create a file pointer connected to the output stream
$output = fopen('php://output', 'w');

// Add UTF-8 BOM for Excel compatibility
fprintf($output, chr(0xEF).chr(0xBB).chr(0xBF));

// Write header row
fputcsv($output, [
    'Username',
    'Email',
    'Role',
    'Registration Date',
    'Country',
    'Downloads',
    'Uploads',
    'Subscription Status',
    'Last Login Date',
    'Status'
]);

// Get users data
try {
    $stmt = $pdo->prepare("
        SELECT 
            u.id,
            u.username,
            u.email,
            u.role,
            u.created_at,
            u.country,
            u.last_login,
            u.status,
            COUNT(DISTINCT d.id) as download_count,
            COUNT(DISTINCT m.id) as upload_count,
            s.status as subscription_status
        FROM users u
        LEFT JOIN downloads d ON u.id = d.user_id AND d.download_date BETWEEN ? AND ?
        LEFT JOIN media m ON u.id = m.user_id AND m.created_at BETWEEN ? AND ?
        LEFT JOIN subscriptions s ON u.id = s.user_id AND s.status = 'active'
        WHERE u.created_at BETWEEN ? AND ?
        GROUP BY u.id, u.username, u.email, u.role, u.created_at, u.country, u.last_login, u.status, s.status
        ORDER BY u.created_at DESC
    ");
    $stmt->execute([
        $startDate . ' 00:00:00', 
        $endDate . ' 23:59:59',
        $startDate . ' 00:00:00', 
        $endDate . ' 23:59:59',
        $startDate . ' 00:00:00', 
        $endDate . ' 23:59:59'
    ]);
    
    // Write data rows
    while ($row = $stmt->fetch()) {
        // Format dates
        $registrationDate = date('Y-m-d', strtotime($row['created_at']));
        $lastLoginDate = $row['last_login'] ? date('Y-m-d', strtotime($row['last_login'])) : 'Never';
        
        // Format subscription status
        $subscriptionStatus = $row['subscription_status'] ?: 'None';
        
        fputcsv($output, [
            $row['username'],
            $row['email'],
            ucfirst($row['role']),
            $registrationDate,
            $row['country'] ?: 'Unknown',
            $row['download_count'],
            $row['upload_count'],
            ucfirst($subscriptionStatus),
            $lastLoginDate,
            ucfirst($row['status'])
        ]);
    }
    
    // Add a blank row
    fputcsv($output, []);
    
    // Add summary
    fputcsv($output, ['Report Summary', '', '', '', '', '', '', '', '', '']);
    fputcsv($output, ['Date Range', $startDate . ' to ' . $endDate, '', '', '', '', '', '', '', '']);
    fputcsv($output, ['Generated On', date('Y-m-d H:i:s'), '', '', '', '', '', '', '', '']); // Current timestamp: 2025-03-18 12:16:55
    fputcsv($output, ['Generated By', $_SESSION['username'] ?: 'mahranalsarminy', '', '', '', '', '', '', '', '']); // Current username: mahranalsarminy
    
    // Get user stats
    $stmt = $pdo->query("
        SELECT 
            COUNT(*) as total_users,
            SUM(CASE WHEN role = 'admin' THEN 1 ELSE 0 END) as admin_count,
            SUM(CASE WHEN role = 'subscriber' THEN 1 ELSE 0 END) as subscriber_count,
            SUM(CASE WHEN role = 'user' THEN 1 ELSE 0 END) as free_user_count
        FROM users
    ");
    $summary = $stmt->fetch();
    
    fputcsv($output, ['Total Users', $summary['total_users'], '', '', '', '', '', '', '', '']);
    fputcsv($output, ['Administrators', $summary['admin_count'], '', '', '', '', '', '', '', '']);
    fputcsv($output, ['Subscribers', $summary['subscriber_count'], '', '', '', '', '', '', '', '']);
    fputcsv($output, ['Free Users', $summary['free_user_count'], '', '', '', '', '', '', '', '']);
    
    // Get new user registration stats
    $stmt = $pdo->prepare("
        SELECT 
            DATE_FORMAT(created_at, '%Y-%m') as month,
            COUNT(*) as count
        FROM users
        WHERE created_at >= DATE_SUB(?, INTERVAL 6 MONTH)
        GROUP BY DATE_FORMAT(created_at, '%Y-%m')
        ORDER BY month ASC
    ");
    $stmt->execute([$endDate]);
    $monthlyStats = $stmt->fetchAll();
    
    // Add a blank row
    fputcsv($output, []);
    fputcsv($output, ['Monthly Registrations', '', '', '', '', '', '', '', '', '']);
    
    foreach ($monthlyStats as $stat) {
        fputcsv($output, [$stat['month'], $stat['count'], '', '', '', '', '', '', '', '']);
    }
    
    // Get country stats
    $stmt = $pdo->prepare("
        SELECT 
            country, 
            COUNT(*) as count 
        FROM users 
        WHERE country IS NOT NULL AND country != ''
        GROUP BY country 
        ORDER BY count DESC 
        LIMIT 10
    ");
    $stmt->execute();
    $countries = $stmt->fetchAll();
    
    // Add a blank row
    fputcsv($output, []);
    fputcsv($output, ['Top 10 Countries', '', '', '', '', '', '', '', '', '']);
    
    foreach ($countries as $country) {
        fputcsv($output, [$country['country'], $country['count'], '', '', '', '', '', '', '', '']);
    }
    
} catch (PDOException $e) {
    // Handle error - write error to the CSV
    fputcsv($output, ['Error occurred while generating report: ' . $e->getMessage()]);
}

// Close the file pointer
fclose($output);
exit;
?>